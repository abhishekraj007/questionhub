{"version":3,"sources":["src/components/Sidebar.tsx","src/components/QuestionItem.tsx","src/components/QuestionItemWeb.tsx","src/components/Loader.tsx","src/data-contracts/index.tsx","src/components/QuestionDetail.tsx","src/components/QuestionContainer.tsx","src/components/Header.tsx","src/stores/menuStore.ts","src/apis/index.ts","src/stores/questionsStore.ts","App.tsx","src/stores/index.ts"],"names":["Sidebar","observer","menuStore","store","theme","useTheme","selectedIndex","selectedMenu","onSelect","index","setSelectedMenu","title","accessoryLeft","props","style","width","height","name","tintColor","memo","StyleSheet","create","accordionItem","borderWidth","borderColor","borderRadius","marginBottom","item","useState","content","useWindowDimensions","setSlected","onFavPress","toggleFav","bookmarked","StarIcon","onPress","accessoryRight","size","appearance","status","Loader","screenHeight","View","styles","loaderContainer","SidebarItem","AppTheme","display","alignItems","justifyContent","paddingRight","paddingBottom","selected","screenWidth","contentWidth","source","html","tagsStyles","body","color","position","left","top","transform","translateX","translateY","QuestionContainer","selectedQuestion","setSelectedQuestion","console","log","questionStore","isLoading","javasctipt","javasctiptFavorites","getQuestions","toggleFavorite","listData","row","section","useEffect","a","async","JAVASCRIPT","renderQuestion","Platform","OS","panel","panelLeft","data","ItemSeparatorComponent","Divider","renderItem","panelRight","flexDirection","overflow","padding","Header","setTheme","ToggleIcon","LIGHT","paddingLeft","DARK","icon","MenuStore","IndexPath","makeAutoObservable","this","getJSQuestions","fetch","res","json","QuestionStore","includeFavorites","forEach","fav","founded","findIndex","id","splice","type","setIsLoading","setJavascript","setJavascriptFavorites","localStorage","setItem","JAVASCRIPT_FAVORITE","JSON","stringify","foundedIndex","foundedEle","newFav","filter","newRawData","map","ele","nonFavData","question","jsFavString","getItem","jsFavObject","parse","userTheme","icons","EvaIconsPack","eva","container"],"mappings":"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","file":"static/js/app.179eb970.chunk.js","sourcesContent":["import {\n  Menu,\n  MenuGroup,\n  MenuItem,\n  Icon,\n  useTheme,\n} from \"@ui-kitten/components\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const Sidebar = observer(({ store: { menuStore } }: Props) => {\n  const theme = useTheme();\n\n  const StarIcon = (props) => (\n    <Icon\n      {...props}\n      style={{ width: 16, height: 16, tintColor: theme[\"color-danger-500\"] }}\n      name=\"star-outline\"\n    />\n  );\n  const BookOpen = (props) => (\n    <Icon\n      {...props}\n      style={{ width: 16, height: 16 }}\n      name=\"book-open-outline\"\n    />\n  );\n\n  return (\n    <Menu\n      selectedIndex={menuStore.selectedMenu}\n      onSelect={(index) => {\n        menuStore.setSelectedMenu(index);\n      }}\n    >\n      <MenuGroup title=\"Javascript\">\n        <MenuItem title=\"All\" accessoryLeft={BookOpen} />\n        <MenuItem title=\"Favorites\" accessoryLeft={StarIcon} />\n      </MenuGroup>\n      <MenuItem title=\"React\" />\n      <MenuItem title=\"HTML\"></MenuItem>\n      <MenuItem title=\"CSS\"></MenuItem>\n      <MenuItem title=\"Accessibility\"></MenuItem>\n    </Menu>\n  );\n});\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { Button, Icon, ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n  onFavPress: (item: Question) => void;\n}\n\nconst QuestionItemWeb = ({\n  item,\n  setSlected,\n  index,\n  onFavPress,\n}: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  const toggleFav = () => {\n    onFavPress({\n      ...item,\n      bookmarked: !item.bookmarked,\n    });\n  };\n\n  const StarIcon = (props) => (\n    <Icon {...props} name={item?.bookmarked ? \"star\" : \"star-outline\"} />\n  );\n\n  const favButton = () => {\n    return (\n      <Button\n        size=\"tiny\"\n        appearance=\"ghost\"\n        onPress={toggleFav}\n        status={item?.bookmarked ? \"danger\" : \"basic\"}\n        accessoryLeft={StarIcon}\n      />\n    );\n  };\n\n  return (\n    <ListItem\n      title={`${index + 1}. ${item?.title}`}\n      onPress={onItemClick}\n      accessoryRight={favButton}\n    />\n  );\n};\n\nexport default memo(QuestionItemWeb);\n","import { Spinner } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\n\nexport default function Loader() {\n  const { height: screenHeight } = useWindowDimensions();\n  return (\n    <View\n      style={[\n        styles.loaderContainer,\n        {\n          height: `${screenHeight - 90}px`,\n        },\n      ]}\n    >\n      <Spinner size=\"giant\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingRight: 200,\n    paddingBottom: 100,\n  },\n});\n","export interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n  bookmarked?: boolean;\n  category?: string;\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = \"JAVASCRIPT\",\n  JAVASCRIPT_FAVORITE = \"JAVASCRIPT_FAVORITE\",\n  REACT = \"REACT\",\n  REACT_FAVORITE = \"REACT_FAVORITE\",\n}\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","import React, { useEffect, useState } from \"react\";\nimport { View, StyleSheet, Platform, useWindowDimensions } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, Input, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\nimport { Question, SidebarItem } from \"../data-contracts\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const QuestionContainer = observer(({ store }: Props) => {\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const { height: screenHeight } = useWindowDimensions();\n\n  const [value, setValue] = useState(\"\");\n\n  console.log(\"render q container\");\n\n  const {\n    menuStore: { selectedMenu },\n    questionStore: {\n      isLoading,\n      javasctipt,\n      javasctiptFavorites,\n      getQuestions,\n      toggleFavorite,\n    },\n  } = store;\n\n  const isFavMenuSelected =\n    selectedMenu.row === 1 && selectedMenu.section === 0;\n\n  const listData = isFavMenuSelected ? javasctiptFavorites : javasctipt;\n\n  const onFavPress = (item: Question) => {\n    toggleFavorite(item);\n  };\n\n  useEffect(() => {\n    (async () => {\n      getQuestions(SidebarItem.JAVASCRIPT);\n      console.log(javasctipt);\n    })();\n  }, []);\n\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item.title}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n          onFavPress={onFavPress}\n        />\n      );\n    }\n    return <QuestionItem key={item.title} item={item} />;\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      return (\n        <>\n          {isLoading && <Loader />}\n          <View style={styles.panel}>\n            <View\n              style={[\n                styles.panelLeft,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              {/* <Input\n                placeholder=\"Search\"\n                value={value}\n                onChangeText={(nextValue) => setValue(nextValue)}\n              /> */}\n              <List\n                data={listData}\n                ItemSeparatorComponent={Divider}\n                renderItem={renderQuestion}\n              />\n            </View>\n            <View\n              style={[\n                styles.panelRight,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <QuestionDetail selected={selectedQuestion} />\n            </View>\n          </View>\n        </>\n      );\n    }\n    return (\n      <>\n        {isLoading && <Loader />}\n        <List\n          data={listData}\n          ItemSeparatorComponent={Divider}\n          renderItem={renderQuestion}\n        />\n      </>\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  panel: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  panelLeft: {\n    width: `40%`,\n    overflow: \"scroll\",\n  },\n  panelRight: {\n    width: `60%`,\n    overflow: \"scroll\",\n    // borderColor: \"rgba(0,0,0,0.1)\",\n    padding: 16,\n    paddingRight: 32,\n    // borderLeftWidth: 1,\n  },\n});\n","import React, { useState } from \"react\";\nimport {\n  Icon,\n  Input,\n  TopNavigation,\n  TopNavigationAction,\n} from \"@ui-kitten/components\";\nimport { AppTheme } from \"../data-contracts\";\nimport { useWindowDimensions, View } from \"react-native\";\n\ninterface Props {\n  theme: AppTheme;\n  setTheme: (theme: AppTheme) => void;\n}\n\nfunction Header({ theme, setTheme }: Props) {\n  const [value, setValue] = useState(\"\");\n  const { width } = useWindowDimensions();\n  console.log(width);\n\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const SearchBar = () => (\n    <View\n      style={{\n        width: width - 440,\n        maxWidth: 600,\n        marginRight: width / 8,\n      }}\n    >\n      <Input\n        placeholder=\"Search\"\n        value={value}\n        onChangeText={(nextValue) => setValue(nextValue)}\n      />\n    </View>\n  );\n\n  const renderRightNav = () => {\n    return (\n      <View\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          // width: \"80%\",\n        }}\n      >\n        {/* <SearchBar /> */}\n        <TopNavigationAction\n          onPress={() => {\n            setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n          }}\n          icon={ToggleIcon}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <TopNavigation\n      style={{\n        paddingLeft: 16,\n        paddingRight: 16,\n      }}\n      title={\"Interview Questions\"}\n      // accessoryLeft={SearchBar}\n      accessoryRight={renderRightNav}\n    ></TopNavigation>\n  );\n}\n\nexport default Header;\n","import { IndexPath } from \"@ui-kitten/components\";\nimport { makeAutoObservable } from \"mobx\";\n\nexport interface IMenuStore {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport class MenuStore implements IMenuStore {\n  selectedMenu: IndexPath = new IndexPath(0);\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setSelectedMenu(selectedMenu) {\n    this.selectedMenu = selectedMenu;\n  }\n}\n","const JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v1.json\";\n\nexport const getJSQuestions = async () => {\n  try {\n    const res = await fetch(JS_URL);\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { makeAutoObservable } from \"mobx\";\nimport { getJSQuestions } from \"../apis\";\nimport { Question, SidebarItem } from \"../data-contracts\";\n\nexport interface IQuestionStore {\n  isLoading: boolean;\n  setIsLoading: (value: boolean) => void;\n  javasctipt: Question[];\n  javasctiptFavorites: Question[];\n  setJavascript: (questions: Question[]) => void;\n  setJavascriptFavorites: (questions: Question[]) => void;\n  getQuestions: (type: SidebarItem) => void;\n  toggleFavorite: (item: Question) => void;\n}\n\nexport class QuestionStore implements IQuestionStore {\n  isLoading: boolean = false;\n  javasctipt: Question[] = [];\n  javasctiptFavorites: Question[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // Get favorites from localstore\n    const jsFavString = localStorage.getItem(SidebarItem.JAVASCRIPT_FAVORITE);\n    if (jsFavString) {\n      const jsFavObject = JSON.parse(jsFavString);\n      this.setJavascriptFavorites(jsFavObject);\n    }\n  }\n\n  includeFavorites = (data: Question[]) => {\n    this.javasctiptFavorites.forEach((fav) => {\n      const founded = data.findIndex((item) => item.id === fav.id);\n      data.splice(founded, 1);\n    });\n\n    return [...this.javasctiptFavorites, ...data];\n  };\n\n  getQuestions = async (type: SidebarItem) => {\n    switch (type) {\n      case SidebarItem.JAVASCRIPT:\n        try {\n          console.log(\"made fresh api call\");\n          this.setIsLoading(true);\n          const data = await getJSQuestions();\n\n          this.setJavascript(this.includeFavorites(data));\n        } catch (error) {\n          console.log(error);\n        } finally {\n          this.setIsLoading(false);\n        }\n    }\n  };\n\n  setJavascript = (data: Question[]) => {\n    this.javasctipt = data;\n  };\n\n  setIsLoading = (isLoading: boolean) => {\n    this.isLoading = isLoading;\n  };\n\n  setJavascriptFavorites = (data: Question[]) => {\n    localStorage.setItem(SidebarItem.JAVASCRIPT_FAVORITE, JSON.stringify(data));\n    this.javasctiptFavorites = data;\n  };\n\n  toggleFavorite = (item: Question) => {\n    // If item is present in fav list remove it\n\n    const foundedIndex = this.javasctiptFavorites.findIndex(\n      (fav) => fav.id === item.id\n    );\n\n    console.log(foundedIndex);\n    let foundedEle = this.javasctiptFavorites[foundedIndex];\n\n    // Present in fav\n    if (foundedIndex >= 0) {\n      console.log(\"found an ele\");\n      // remove from fav\n      const newFav = this.javasctiptFavorites.filter(\n        (item) => item.id !== foundedEle.id\n      );\n      console.log(newFav);\n      this.setJavascriptFavorites(newFav);\n      // toggle state in original array as well\n      // foundedEle = {\n      //   ...foundedEle,\n      //   bookmarked: false,\n      // };\n      const newRawData = this.javasctipt.map((ele) => {\n        if (ele.id === foundedEle.id) {\n          return {\n            ...ele,\n            bookmarked: false,\n          };\n        }\n        return ele;\n      });\n\n      this.setJavascript(newRawData);\n    } else {\n      const nonFavData = this.javasctipt.filter(\n        (question) => question.id !== item.id\n      );\n\n      this.setJavascript([item, ...nonFavData]);\n\n      this.setJavascriptFavorites([...this.javasctiptFavorites, item]);\n    }\n  };\n}\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  Layout,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./src/components/Sidebar\";\nimport { QuestionContainer } from \"./src/components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { AppTheme } from \"./src/data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport Header from \"./src/components/Header\";\nimport { useEffect } from \"react\";\nimport { Store } from \"./src/stores\";\n\nconst store = new Store();\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const userTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState<AppTheme>(\n    (userTheme as AppTheme) ?? AppTheme.LIGHT\n  );\n\n  console.log(store);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <Header theme={theme} setTheme={setTheme} />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar store={store} />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer store={store} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n","import { IMenuStore, MenuStore } from \"./menuStore\";\nimport { IQuestionStore, QuestionStore } from \"./questionsStore\";\n\nexport interface IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n}\n\nexport class Store implements IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n\n  constructor() {\n    this.menuStore = new MenuStore();\n    this.questionStore = new QuestionStore();\n  }\n}\n"],"sourceRoot":""}