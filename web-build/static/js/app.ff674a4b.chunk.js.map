{"version":3,"sources":["components/Sidebar.tsx","components/QuestionItem.tsx","components/QuestionItemWeb.tsx","components/Loader.tsx","data-contracts/index.tsx","components/QuestionDetail.tsx","components/QuestionContainer.tsx","App.tsx"],"names":["Sidebar","selectedMenu","setSelectedMenu","selectedIndex","IndexPath","row","onSelect","index","title","memo","StyleSheet","create","accordionItem","borderWidth","borderColor","borderRadius","marginBottom","item","useState","content","useWindowDimensions","width","itemWrapper","padding","setSlected","onPress","Loader","Text","skeletonContainer","marginLeft","marginRight","marginTop","SidebarItem","selected","theme","useTheme","screenWidth","height","console","log","contentWidth","source","html","tagsStyles","body","color","View","style","position","left","top","transform","translateX","translateY","QuestionContainer","data","setData","selectedQuestion","setSelectedQuestion","isLoading","setIsLoading","screenHeight","useEffect","a","async","fetch","res","json","renderQuestion","Platform","OS","styles","gridTwo","overflow","ItemSeparatorComponent","Divider","renderItem","borderLeftWidth","display","flexDirection","webPanel","panelLeft","panelRight","backgroundColor","AppTheme","LIGHT","setTheme","JAVASCRIPT","ToggleIcon","props","name","icons","EvaIconsPack","eva","accessoryRight","DARK","icon","container"],"mappings":"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","file":"static/js/app.ff674a4b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Drawer, DrawerItem, IndexPath } from \"@ui-kitten/components\";\nimport { SidebarItem } from \"../data-contracts\";\n\ninterface Props {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport const Sidebar = ({ selectedMenu, setSelectedMenu }: Props) => {\n  return (\n    <Drawer\n      selectedIndex={new IndexPath(selectedMenu.row)}\n      onSelect={(index) => setSelectedMenu(index)}\n    >\n      <DrawerItem title=\"Javascript\" />\n      <DrawerItem title=\"React\" />\n    </Drawer>\n  );\n};\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport {\n  StyleSheet,\n  useWindowDimensions,\n  TouchableOpacity,\n  Pressable,\n  Text,\n} from \"react-native\";\nimport { ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n}\n\nconst QuestionItemWeb = ({ item, setSlected, index }: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  return (\n    <ListItem title={`${index + 1}. ${item?.title}`} onPress={onItemClick} />\n  );\n};\n\nconst styles = StyleSheet.create({\n  itemWrapper: {\n    padding: 8,\n  },\n  item: {\n    // borderWidth: 1,\n    // borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItemWeb);\n","import React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\n\nexport default function Loader() {\n  return (\n    <>\n      <Text>Loading...</Text>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  skeletonContainer: {\n    marginLeft: 16,\n    marginRight: 16,\n    marginTop: 16,\n  },\n});\n","export interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = 0,\n  REACT = 1,\n}\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n  console.log(theme);\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","import React, { memo, useEffect, useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  ScrollView,\n  FlatList,\n  Platform,\n  Text,\n  useWindowDimensions,\n} from \"react-native\";\nimport { Question, SidebarItem } from \"../data-contracts\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, IndexPath, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\n\ninterface Props {\n  selectedMenu: IndexPath;\n}\n\nconst JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v2.json\";\n\nexport const QuestionContainer = memo(({ selectedMenu }: Props) => {\n  const [data, setData] = useState<Question[]>([]);\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  console.log(selectedMenu);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const res = await fetch(JS_URL);\n        const data = await res.json();\n        setData(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  if (isLoading) {\n    <Loader />;\n  }\n\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item.title}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n        />\n      );\n    }\n    return <QuestionItem key={item.title} item={item} />;\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      return (\n        <View style={styles.gridTwo}>\n          <View\n            style={{\n              width: `40%`,\n              height: `${screenHeight - 48}px`,\n              overflow: \"scroll\",\n            }}\n          >\n            <List\n              data={data}\n              ItemSeparatorComponent={Divider}\n              renderItem={renderQuestion}\n            />\n          </View>\n          <View\n            style={{\n              width: `60%`,\n              height: `${screenHeight - 48}px`,\n              overflow: \"scroll\",\n              borderColor: \"rgba(0,0,0,0.1)\",\n              padding: 16,\n              borderLeftWidth: 1,\n            }}\n          >\n            <QuestionDetail selected={selectedQuestion} />\n          </View>\n        </View>\n      );\n    }\n    return (\n      <List\n        data={data}\n        ItemSeparatorComponent={Divider}\n        renderItem={renderQuestion}\n      />\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  gridTwo: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  webPanel: {},\n  panelLeft: {\n    width: \"320px\",\n  },\n  panelRight: {\n    backgroundColor: \"red\",\n  },\n});\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  Icon,\n  IndexPath,\n  Layout,\n  TopNavigation,\n  TopNavigationAction,\n  Text,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { QuestionContainer } from \"./components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { SidebarItem } from \"./data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const [theme, setTheme] = useState<AppTheme>(AppTheme.LIGHT);\n\n  const [selectedMenu, setSelectedMenu] = useState(\n    new IndexPath(SidebarItem.JAVASCRIPT)\n  );\n\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const renderToggleTheme = () => {\n    return (\n      <TopNavigationAction\n        onPress={() => {\n          setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n        }}\n        icon={ToggleIcon}\n      />\n    );\n  };\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <TopNavigation\n          title={\"Interview Questions\"}\n          accessoryRight={renderToggleTheme}\n        />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar\n              selectedMenu={selectedMenu}\n              setSelectedMenu={setSelectedMenu}\n            />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer selectedMenu={selectedMenu} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}