{"version":3,"sources":["src/components/Sidebar.tsx","src/components/QuestionItem.tsx","src/components/QuestionItemWeb.tsx","src/components/Loader.tsx","src/data-contracts/index.tsx","src/components/QuestionDetail.tsx","src/apis/index.ts","src/components/QuestionContainer.tsx","src/components/Header.tsx","src/stores/menuStore.ts","src/stores/index.ts","App.tsx"],"names":["Sidebar","observer","menuStore","store","theme","useTheme","console","log","selectedIndex","selectedMenu","onSelect","index","setSelectedMenu","title","accessoryLeft","props","style","width","height","tintColor","name","memo","StyleSheet","create","accordionItem","borderWidth","borderColor","borderRadius","marginBottom","item","useState","content","useWindowDimensions","setSlected","onFavPress","toggleFav","bookmarked","StarIcon","onPress","accessoryRight","size","appearance","status","Loader","screenHeight","View","styles","loaderContainer","SidebarItem","AppTheme","display","alignItems","justifyContent","paddingRight","paddingBottom","selected","screenWidth","contentWidth","source","html","tagsStyles","body","color","position","left","top","transform","translateX","translateY","getJSQuestions","a","async","fetch","res","json","data","QuestionContainer","rawData","setRawData","favoritesData","setFavorites","selectedQuestion","setSelectedQuestion","isLoading","setIsLoading","listData","row","section","nonFavData","filter","question","id","useEffect","renderQuestion","Platform","OS","panel","panelLeft","ItemSeparatorComponent","Divider","renderItem","panelRight","flexDirection","overflow","padding","borderLeftWidth","Header","setTheme","ToggleIcon","LIGHT","paddingLeft","DARK","icon","MenuStore","IndexPath","makeAutoObservable","this","Store","userTheme","localStorage","getItem","setItem","icons","EvaIconsPack","eva","container"],"mappings":"8vBAcO,IAAMA,EAAUC,aAAS,YAAsC,IAA1BC,EAAyB,EAAlCC,MAASD,UACpCE,EAAQC,qBAEdC,QAAQC,IAAIL,GAYZ,OACE,eAAC,SAAD,CACEM,cAAeN,EAAUO,aACzBC,SAAU,SAACC,GACTL,QAAQC,IAAII,GACZT,EAAUU,gBAAgBD,IAJ9B,UAOE,cAAC,cAAD,CAAaE,MAAM,aAAnB,SACE,cAAC,aAAD,CAAYA,MAAM,YAAYC,cAjBnB,SAACC,GAAD,OACf,cAAC,OAAD,OACMA,GADN,IAEEC,MAAO,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,UAAWf,EAAM,qBACjDgB,KAAK,eAeL,cAAC,aAAD,CAAYP,MAAM,UAClB,cAAC,aAAD,CAAYA,MAAM,SAClB,cAAC,aAAD,CAAYA,MAAM,QAClB,cAAC,aAAD,CAAYA,MAAM,wB,0CCdTQ,GATAC,IAAWC,OAAO,CAC/BC,cAAe,CACbC,YAAa,EACbC,YAAa,kBACbC,aAAc,EACdC,aAAc,KAIHP,gBAlBM,SAAC,GAAiC,IAA/BQ,EAA8B,EAA9BA,KACtB,EAAgCC,oBAAS,GAAzC,qBAC2BD,EAAnBhB,MAAmBgB,EAAZE,QAEGC,cAAVf,MAER,OAAO,cAAC,OAAD,UAAOY,EAAKhB,Y,ikBCNrB,IAyCeQ,kBAzCS,SAAC,GAKI,IAJ3BQ,EAI0B,EAJ1BA,KACAI,EAG0B,EAH1BA,WACAtB,EAE0B,EAF1BA,MACAuB,EAC0B,EAD1BA,WAMMC,EAAY,WAChBD,EAAW,OACNL,GADK,IAERO,YAAaP,EAAKO,cAEpB9B,QAAQC,IAAIsB,IAGRQ,EAAW,SAACtB,GAAD,OAAW,cAAC,OAAD,OAAUA,GAAV,IAAiBK,KAAK,WAclD,OACE,cAAC,WAAD,CACEP,MAAUF,EAAQ,EAAb,YAAmBkB,OAAnB,EAAmBA,EAAMhB,OAC9ByB,QA7BgB,WAClBL,EAAWJ,IA6BTU,eAhBc,WAChB,OACE,cAAC,SAAD,CACEC,KAAK,OACLC,WAAW,QACXH,QAASH,EACTO,OAAY,MAAJb,KAAMO,WAAa,SAAW,QACtCtB,cAAeuB,UClCR,SAASM,IACtB,IAAgBC,EAAiBZ,cAAzBd,OACR,OACE,cAAC2B,EAAA,EAAD,CACE7B,MAAO,CACL8B,EAAOC,gBACP,CACE7B,OAAW0B,EAAe,GAApB,OAJZ,SAQE,cAAC,UAAD,CAASJ,KAAK,YAKpB,ICZYQ,EAKAC,EDONH,EAASxB,IAAWC,OAAO,CAC/BwB,gBAAiB,CACfG,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,aAAc,IACdC,cAAe,O,kBEuBJjC,kBAvCQ,SAAC,GAAuC,IAArCkC,EAAoC,EAApCA,SAClBnD,EAAQC,qBACd,EAAqD2B,cAAtCwB,EAAf,EAAQvC,MAAR,EAA4BC,OAE5B,OAAIqC,EAEA,cAAC,IAAD,CACEE,aAAcD,EAAc,EAC5BE,OAAQ,CACNC,KAAK,IAAD,MAAKJ,OAAL,EAAKA,EAAUxB,UAErB6B,WAAY,CACVC,KAAM,CACJC,MAAO1D,EAAM,wBAQrB,cAACyC,EAAA,EAAD,CACE7B,MAAO,CACL+C,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,CACT,CACEC,YAAa,GACbC,YAAa,MARrB,SAaE,cAAC,OAAD,qCCzCOC,EAAiB,4BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAERE,MAJpB,6EAE4B,cAEpBC,EAFoB,kBAAAH,EAAA,MAGPG,EAAIC,QAHG,cAGpBC,EAHoB,yBAInBA,GAJmB,kCAM1BrE,QAAQC,IAAR,MAN0B,kECajBqE,EAAoB3E,aAAS,YAAuB,IAApBE,EAAmB,EAAnBA,MAC3C,EAA8B2B,mBAAqB,IAAnD,WAAO+C,EAAP,KAAgBC,EAAhB,KACA,EAAsChD,mBAAqB,IAA3D,WAAOiD,EAAP,KAAsBC,EAAtB,KACA,EAAgDlD,qBAAhD,WAAOmD,EAAP,KAAyBC,EAAzB,KACA,EAAkCpD,oBAAS,GAA3C,WAAOqD,EAAP,KAAkBC,EAAlB,KACgBxC,EAAiBZ,cAAzBd,OAGOT,EACXN,EADFD,UAAaO,aAMT4E,EAFiB,IAArB5E,EAAa6E,KAAsC,IAAzB7E,EAAa8E,QAEJR,EAAgBF,EAE/C3C,EAAa,SAACL,GAClB,IAAM2D,EAAaX,EAAQY,QAAO,SAACC,GAAD,OAAcA,EAASC,KAAO9D,EAAK8D,MACrEb,EAAW,CAACjD,GAAF,WAAW2D,KACrBR,EAAa,GAAD,WAAKD,GAAL,CAAoBlD,MAGlC+D,qBAAU,YACR,WAAC,QAAAtB,EAAAC,OAAA,gEAEGa,GAAa,GAFhB,WAAAd,EAAA,MAGsBD,KAHtB,OAGSM,EAHT,OAIGG,EAAWH,GAJd,gDAMGrE,QAAQC,IAAR,MANH,yBAQG6E,GAAa,GARhB,mFAAD,KAWC,IAEH,IAAMS,EAAiB,SAAC,GAAqB,IAAnBhE,EAAkB,EAAlBA,KAAMlB,EAAY,EAAZA,MAC9B,MAAoB,QAAhBmF,IAASC,GAET,cAAC,EAAD,CAEElE,KAAMA,EACNlB,MAAOA,EACPsB,WAAYiD,EACZhD,WAAYA,GAJPL,EAAKhB,OAQT,cAAC,EAAD,CAA+BgB,KAAMA,GAAlBA,EAAKhB,QAiDjC,MA7CsB,QAAhBiF,IAASC,GAET,qCACGZ,GAAa,cAACxC,EAAD,IACd,eAACE,EAAA,EAAD,CAAM7B,MAAO8B,EAAOkD,MAApB,UACE,cAACnD,EAAA,EAAD,CACE7B,MAAO,CACL8B,EAAOmD,UACP,CACE/E,OAAW0B,EAAe,GAApB,OAJZ,SAQE,cAAC,OAAD,CACE+B,KAAMU,EACNa,uBAAwBC,UACxBC,WAAYP,MAGhB,cAAChD,EAAA,EAAD,CACE7B,MAAO,CACL8B,EAAOuD,WACP,CACEnF,OAAW0B,EAAe,GAApB,OAJZ,SAQE,cAAC,EAAD,CAAgBW,SAAU0B,YAOlC,qCACGE,GAAa,cAACxC,EAAD,IACd,cAAC,OAAD,CACEgC,KAAMU,EACNa,uBAAwBC,UACxBC,WAAYP,UAShB/C,EAASxB,IAAWC,OAAO,CAC/ByE,MAAO,CACL9C,QAAS,OACToD,cAAe,OAEjBL,UAAW,CACThF,MAAM,MACNsF,SAAU,UAEZF,WAAY,CACVpF,MAAM,MACNsF,SAAU,SACV7E,YAAa,kBACb8E,QAAS,GACTnD,aAAc,GACdoD,gBAAiB,M,SH3HTzD,O,2BAAAA,I,kBAAAA,M,cAKAC,K,cAAAA,E,aAAAA,M,mlBI4BGyD,MA5Bf,YAA6C,IAA3BtG,EAA0B,EAA1BA,MAAOuG,EAAmB,EAAnBA,SACjBC,EAAa,SAAC7F,GAAD,OACjB,cAAC,OAAD,OAAUA,GAAV,IAAiBK,KAAMhB,IAAU6C,EAAS4D,MAAQ,OAAS,UAc7D,OACE,cAAC,gBAAD,CACE7F,MAAO,CACL8F,YAAa,GACbzD,aAAc,IAEhBxC,MAAO,sBACP0B,eAlBsB,WACxB,OACE,cAAC,sBAAD,CACED,QAAS,WACPqE,EAASvG,IAAU6C,EAAS4D,MAAQ5D,EAAS8D,KAAO9D,EAAS4D,QAE/DG,KAAMJ,Q,wCChBDK,EAAb,WAGE,aAAe,iBAFfxG,aAA0B,IAAIyG,YAAU,GAGtCC,YAAmBC,MAJvB,2CAOE,SAAgB3G,GACd2G,KAAK3G,aAAeA,MARxB,KCFa4G,EAAb,KAGE,aAAe,YACbD,KAAKlH,UAAY,IAAI+G,K,ikBCQV,eAAO,IAAD,EACJzD,EAAgBxB,cAAvBf,MACFqG,EAAYC,aAAaC,QAAQ,SACvC,EAA0B1F,mBAAQ,SAC/BwF,GAD+B,EACLrE,EAAS4D,OADtC,WAAOzG,EAAP,KAAcuG,EAAd,KAIMxG,EAAQ,IAAIkH,EAMlB,OAJAzB,qBAAU,WACR2B,aAAaE,QAAQ,QAASrH,KAC7B,CAACA,IAGF,qCACE,cAAC,eAAD,CAAcsH,MAAOC,iBACrB,eAAC,sBAAD,OACMC,GADN,IAEExH,MAAOA,IAAU6C,EAAS4D,MAAQe,QAAYA,OAFhD,UAIE,cAAC,EAAD,CAAQxH,MAAOA,EAAOuG,SAAUA,IAChC,cAAC,UAAD,IACA,eAAC,SAAD,CAAQ3F,MAAO8B,EAAO+E,UAAtB,UACE,cAAChF,EAAA,EAAD,CACE7B,MAAO,CACLC,MAAO,SAFX,SAKE,cAACjB,EAAD,CAASG,MAAOA,MAElB,cAAC0C,EAAA,EAAD,CACE7B,MAAO,CACLC,MAAUuC,EAAc,IAAnB,MAFT,SAKE,cAACoB,EAAD,CAAmBzE,MAAOA,iBAnCvB,IA2CT2C,EAASxB,IAAWC,OAAO,CAC/BsG,UAAW,CACTrB,QAAS,GACTD,SAAU,SACVrD,QAAS,OACToD,cAAe,U","file":"static/js/app.67d16d29.chunk.js","sourcesContent":["import {\n  Drawer,\n  DrawerGroup,\n  DrawerItem,\n  Icon,\n  useTheme,\n} from \"@ui-kitten/components\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const Sidebar = observer(({ store: { menuStore } }: Props) => {\n  const theme = useTheme();\n\n  console.log(menuStore);\n\n  // const [selectedMenu, setSelectedMenu] = useMenuContext();\n\n  const starIcon = (props) => (\n    <Icon\n      {...props}\n      style={{ width: 12, height: 12, tintColor: theme[\"color-danger-500\"] }}\n      name=\"star\"\n    />\n  );\n\n  return (\n    <Drawer\n      selectedIndex={menuStore.selectedMenu}\n      onSelect={(index) => {\n        console.log(index);\n        menuStore.setSelectedMenu(index);\n      }}\n    >\n      <DrawerGroup title=\"Javascript\">\n        <DrawerItem title=\"Favorites\" accessoryLeft={starIcon} />\n      </DrawerGroup>\n      <DrawerItem title=\"React\" />\n      <DrawerItem title=\"HTML\"></DrawerItem>\n      <DrawerItem title=\"CSS\"></DrawerItem>\n      <DrawerItem title=\"Accessibility\"></DrawerItem>\n    </Drawer>\n  );\n});\n\n// export const Sidebar = Observer()\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { Button, Icon, ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n  onFavPress: (item: Question) => void;\n}\n\nconst QuestionItemWeb = ({\n  item,\n  setSlected,\n  index,\n  onFavPress,\n}: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  const toggleFav = () => {\n    onFavPress({\n      ...item,\n      bookmarked: !item.bookmarked,\n    });\n    console.log(item);\n  };\n\n  const StarIcon = (props) => <Icon {...props} name=\"star\" />;\n\n  const favButton = () => {\n    return (\n      <Button\n        size=\"tiny\"\n        appearance=\"ghost\"\n        onPress={toggleFav}\n        status={item?.bookmarked ? \"danger\" : \"basic\"}\n        accessoryLeft={StarIcon}\n      />\n    );\n  };\n\n  return (\n    <ListItem\n      title={`${index + 1}. ${item?.title}`}\n      onPress={onItemClick}\n      accessoryRight={favButton}\n    />\n  );\n};\n\nexport default memo(QuestionItemWeb);\n","import { Spinner } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\n\nexport default function Loader() {\n  const { height: screenHeight } = useWindowDimensions();\n  return (\n    <View\n      style={[\n        styles.loaderContainer,\n        {\n          height: `${screenHeight - 90}px`,\n        },\n      ]}\n    >\n      <Spinner size=\"giant\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingRight: 200,\n    paddingBottom: 100,\n  },\n});\n","export interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n  bookmarked?: boolean;\n  category?: string;\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = 0,\n  REACT = 1,\n}\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","const JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v1.json\";\n\nexport const getJSQuestions = async () => {\n  try {\n    const res = await fetch(JS_URL);\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { View, StyleSheet, Platform, useWindowDimensions } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\nimport { Question } from \"../data-contracts\";\nimport { getJSQuestions } from \"../apis\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const QuestionContainer = observer(({ store }: Props) => {\n  const [rawData, setRawData] = useState<Question[]>([]);\n  const [favoritesData, setFavorites] = useState<Question[]>([]);\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { height: screenHeight } = useWindowDimensions();\n\n  const {\n    menuStore: { selectedMenu },\n  } = store;\n\n  const isFavMenuSelected =\n    selectedMenu.row === 0 && selectedMenu.section === 0;\n\n  const listData = isFavMenuSelected ? favoritesData : rawData;\n\n  const onFavPress = (item: Question) => {\n    const nonFavData = rawData.filter((question) => question.id !== item.id);\n    setRawData([item, ...nonFavData]);\n    setFavorites([...favoritesData, item]);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const data = await getJSQuestions();\n        setRawData(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item.title}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n          onFavPress={onFavPress}\n        />\n      );\n    }\n    return <QuestionItem key={item.title} item={item} />;\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      return (\n        <>\n          {isLoading && <Loader />}\n          <View style={styles.panel}>\n            <View\n              style={[\n                styles.panelLeft,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <List\n                data={listData}\n                ItemSeparatorComponent={Divider}\n                renderItem={renderQuestion}\n              />\n            </View>\n            <View\n              style={[\n                styles.panelRight,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <QuestionDetail selected={selectedQuestion} />\n            </View>\n          </View>\n        </>\n      );\n    }\n    return (\n      <>\n        {isLoading && <Loader />}\n        <List\n          data={listData}\n          ItemSeparatorComponent={Divider}\n          renderItem={renderQuestion}\n        />\n      </>\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  panel: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  panelLeft: {\n    width: `40%`,\n    overflow: \"scroll\",\n  },\n  panelRight: {\n    width: `60%`,\n    overflow: \"scroll\",\n    borderColor: \"rgba(0,0,0,0.1)\",\n    padding: 16,\n    paddingRight: 32,\n    borderLeftWidth: 1,\n  },\n});\n","import React from \"react\";\nimport {\n  Icon,\n  TopNavigation,\n  TopNavigationAction,\n} from \"@ui-kitten/components\";\nimport { AppTheme } from \"../data-contracts\";\n\ninterface Props {\n  theme: AppTheme;\n  setTheme: (theme: AppTheme) => void;\n}\n\nfunction Header({ theme, setTheme }: Props) {\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const renderToggleTheme = () => {\n    return (\n      <TopNavigationAction\n        onPress={() => {\n          setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n        }}\n        icon={ToggleIcon}\n      />\n    );\n  };\n\n  return (\n    <TopNavigation\n      style={{\n        paddingLeft: 16,\n        paddingRight: 16,\n      }}\n      title={\"Interview Questions\"}\n      accessoryRight={renderToggleTheme}\n    />\n  );\n}\n\nexport default Header;\n","import { IndexPath } from \"@ui-kitten/components\";\nimport { makeAutoObservable } from \"mobx\";\n\nexport interface IMenuStore {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport class MenuStore implements IMenuStore {\n  selectedMenu: IndexPath = new IndexPath(0);\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setSelectedMenu(selectedMenu) {\n    this.selectedMenu = selectedMenu;\n  }\n}\n","import { IMenuStore, MenuStore } from \"./menuStore\";\n\nexport interface IStore {\n  menuStore: IMenuStore;\n}\n\nexport class Store implements IStore {\n  menuStore: IMenuStore;\n\n  constructor() {\n    this.menuStore = new MenuStore();\n  }\n}\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  Layout,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./src/components/Sidebar\";\nimport { QuestionContainer } from \"./src/components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { AppTheme, SidebarItem } from \"./src/data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport Header from \"./src/components/Header\";\nimport { useEffect } from \"react\";\nimport { Store } from \"./src/stores\";\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const userTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState<AppTheme>(\n    (userTheme as AppTheme) ?? AppTheme.LIGHT\n  );\n\n  const store = new Store();\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <Header theme={theme} setTheme={setTheme} />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar store={store} />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer store={store} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}