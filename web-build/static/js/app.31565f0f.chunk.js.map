{"version":3,"sources":["src/components/Sidebar.tsx","src/components/QuestionItem.tsx","src/components/QuestionItemWeb.tsx","src/components/Loader.tsx","src/data-contracts/index.tsx","src/components/QuestionDetail.tsx","src/apis/index.ts","src/components/QuestionContainer.tsx","src/components/Header.tsx","App.tsx"],"names":["Sidebar","selectedMenu","setSelectedMenu","selectedIndex","IndexPath","row","onSelect","index","title","memo","StyleSheet","create","accordionItem","borderWidth","borderColor","borderRadius","marginBottom","item","useState","content","useWindowDimensions","width","setSlected","toggleFav","console","log","StarIcon","props","name","onPress","accessoryRight","size","appearance","status","bookmarked","accessoryLeft","Loader","screenHeight","height","View","style","styles","loaderContainer","SidebarItem","AppTheme","display","alignItems","justifyContent","paddingRight","paddingBottom","selected","theme","useTheme","screenWidth","contentWidth","source","html","tagsStyles","body","color","position","left","top","transform","translateX","translateY","getJSQuestions","a","async","fetch","res","json","data","QuestionContainer","setData","selectedQuestion","setSelectedQuestion","isLoading","setIsLoading","useEffect","renderQuestion","Platform","OS","panel","panelLeft","ItemSeparatorComponent","Divider","renderItem","panelRight","flexDirection","overflow","padding","borderLeftWidth","Header","setTheme","ToggleIcon","LIGHT","paddingLeft","DARK","icon","userTheme","localStorage","getItem","setItem","JAVASCRIPT","icons","EvaIconsPack","eva","container"],"mappings":"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","file":"static/js/app.31565f0f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Drawer, DrawerItem, IndexPath } from \"@ui-kitten/components\";\nimport { SidebarItem } from \"../data-contracts\";\n\ninterface Props {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport const Sidebar = ({ selectedMenu, setSelectedMenu }: Props) => {\n  return (\n    <Drawer\n      selectedIndex={new IndexPath(selectedMenu.row)}\n      onSelect={(index) => setSelectedMenu(index)}\n    >\n      <DrawerItem title=\"Javascript\" />\n      <DrawerItem title=\"React\" />\n    </Drawer>\n  );\n};\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { Button, Icon, ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n}\n\nconst QuestionItemWeb = ({ item, setSlected, index }: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  const toggleFav = () => {\n    console.log(item);\n  };\n\n  const StarIcon = (props) => <Icon {...props} name=\"star\" />;\n\n  const favButton = () => {\n    return (\n      <Button\n        size=\"tiny\"\n        appearance=\"ghost\"\n        onPress={toggleFav}\n        status={item?.bookmarked ? \"danger\" : \"basic\"}\n        accessoryLeft={StarIcon}\n      />\n    );\n  };\n\n  return (\n    <ListItem\n      title={`${index + 1}. ${item?.title}`}\n      onPress={onItemClick}\n      accessoryRight={favButton}\n    />\n  );\n};\n\nexport default memo(QuestionItemWeb);\n","import { Spinner } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\n\nexport default function Loader() {\n  const { height: screenHeight } = useWindowDimensions();\n  return (\n    <View\n      style={[\n        styles.loaderContainer,\n        {\n          height: `${screenHeight - 90}px`,\n        },\n      ]}\n    >\n      <Spinner size=\"giant\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingRight: 200,\n    paddingBottom: 100,\n  },\n});\n","export interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n  bookmarked?: boolean;\n  category?: string;\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = 0,\n  REACT = 1,\n}\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","const JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v1.json\";\n\nexport const getJSQuestions = async () => {\n  try {\n    const res = await fetch(JS_URL);\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { memo, useEffect, useState } from \"react\";\nimport { View, StyleSheet, Platform, useWindowDimensions } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, IndexPath, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\nimport { Question } from \"../data-contracts\";\nimport { getJSQuestions } from \"../apis\";\n\ninterface Props {\n  selectedMenu: IndexPath;\n}\n\nexport const QuestionContainer = memo(({ selectedMenu }: Props) => {\n  const [data, setData] = useState<Question[]>([]);\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const [isLoading, setIsLoading] = useState(false);\n  const { height: screenHeight } = useWindowDimensions();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const data = await getJSQuestions();\n        setData(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item.title}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n        />\n      );\n    }\n    return <QuestionItem key={item.title} item={item} />;\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      return (\n        <>\n          {isLoading && <Loader />}\n          <View style={styles.panel}>\n            <View\n              style={[\n                styles.panelLeft,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <List\n                data={data}\n                ItemSeparatorComponent={Divider}\n                renderItem={renderQuestion}\n              />\n            </View>\n            <View\n              style={[\n                styles.panelRight,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <QuestionDetail selected={selectedQuestion} />\n            </View>\n          </View>\n        </>\n      );\n    }\n    return (\n      <>\n        {isLoading && <Loader />}\n        <List\n          data={data}\n          ItemSeparatorComponent={Divider}\n          renderItem={renderQuestion}\n        />\n      </>\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  panel: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  panelLeft: {\n    width: `40%`,\n    overflow: \"scroll\",\n  },\n  panelRight: {\n    width: `60%`,\n    overflow: \"scroll\",\n    borderColor: \"rgba(0,0,0,0.1)\",\n    padding: 16,\n    paddingRight: 32,\n    borderLeftWidth: 1,\n  },\n});\n","import React from \"react\";\nimport {\n  Icon,\n  TopNavigation,\n  TopNavigationAction,\n} from \"@ui-kitten/components\";\nimport { AppTheme } from \"../data-contracts\";\n\ninterface Props {\n  theme: AppTheme;\n  setTheme: (theme: AppTheme) => void;\n}\n\nfunction Header({ theme, setTheme }: Props) {\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const renderToggleTheme = () => {\n    return (\n      <TopNavigationAction\n        onPress={() => {\n          setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n        }}\n        icon={ToggleIcon}\n      />\n    );\n  };\n\n  return (\n    <TopNavigation\n      style={{\n        paddingLeft: 16,\n        paddingRight: 16,\n      }}\n      title={\"Interview Questions\"}\n      accessoryRight={renderToggleTheme}\n    />\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  IndexPath,\n  Layout,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./src/components/Sidebar\";\nimport { QuestionContainer } from \"./src/components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { AppTheme, SidebarItem } from \"./src/data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport Header from \"./src/components/Header\";\nimport { useEffect } from \"react\";\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const userTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState<AppTheme>(\n    (userTheme as AppTheme) ?? AppTheme.LIGHT\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const [selectedMenu, setSelectedMenu] = useState(\n    new IndexPath(SidebarItem.JAVASCRIPT)\n  );\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <Header theme={theme} setTheme={setTheme} />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar\n              selectedMenu={selectedMenu}\n              setSelectedMenu={setSelectedMenu}\n            />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer selectedMenu={selectedMenu} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""}