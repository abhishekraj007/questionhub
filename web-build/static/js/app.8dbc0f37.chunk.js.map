{"version":3,"sources":["src/data-contracts/index.tsx","src/components/Sidebar.tsx","src/components/Loader.tsx","src/components/QuestionDetail.tsx","src/components/QuestionItem.tsx","src/components/QuestionItemWeb.tsx","src/components/QuestionList.tsx","src/components/QuestionContainer.tsx","src/components/Header.tsx","src/stores/menuStore.ts","src/apis/index.ts","src/stores/questionsStore.ts","App.tsx","src/stores/index.ts"],"names":["SidebarItem","AppTheme","getCategory","indexPath","row","section","JAVASCRIPT_FAVORITE","undefined","REACT","JAVASCRIPT","Sidebar","observer","store","menuStore","questionStore","javasctiptFavorites","theme","useTheme","selectedIndex","selectedMenu","onSelect","index","console","log","setSelectedMenu","clearFilter","length","title","accessoryLeft","props","style","width","height","name","accessoryRight","View","backgroundColor","display","alignItems","justifyContent","borderRadius","category","appearance","status","Loader","screenHeight","useWindowDimensions","styles","loaderContainer","size","StyleSheet","create","paddingRight","paddingBottom","memo","selected","screenWidth","contentWidth","source","html","content","tagsStyles","body","color","position","left","top","transform","translateX","translateY","accordionItem","borderWidth","borderColor","marginBottom","item","useState","setSlected","toggleFavorite","selectedItem","StarIcon","bookmarked","onPress","id","searchTimer","listData","setSelectedQuestion","selectedQuestion","data","ItemSeparatorComponent","Divider","renderItem","Platform","OS","borderLeftWidth","borderRightWidth","QuestionContainer","value","setValue","isLoading","getQuestions","searchQuestion","filteredList","isFavMenuSelected","searchCategory","useEffect","a","async","onSearch","clearTimeout","setTimeout","panel","panelLeft","placeholder","onChangeText","panelRight","nextValue","flexDirection","overflow","padding","Header","setTheme","ToggleIcon","LIGHT","paddingLeft","DARK","icon","MenuStore","IndexPath","makeAutoObservable","this","getJSQuestions","fetch","res","json","QuestionStore","javasctipt","includeFavorites","forEach","fav","founded","findIndex","splice","type","setIsLoading","currentList","setJavascript","setFilteredList","setJavascriptFavorites","localStorage","setItem","JSON","stringify","text","filtered","filter","q","toLocaleLowerCase","includes","toLowerCase","selectedCategory","foundedIndex","foundedEle","newJsData","map","ele","newJsFavData","question","jsFavString","getItem","jsFavObject","parse","userTheme","icons","EvaIconsPack","eva","container"],"mappings":"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","file":"static/js/app.8dbc0f37.chunk.js","sourcesContent":["import { IndexPath } from \"@ui-kitten/components\";\n\nexport interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n  bookmarked?: boolean;\n  category?: string;\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = \"JAVASCRIPT\",\n  JAVASCRIPT_FAVORITE = \"JAVASCRIPT_FAVORITE\",\n  REACT = \"REACT\",\n  REACT_FAVORITE = \"REACT_FAVORITE\",\n}\n\nexport const getCategory = (indexPath: IndexPath) => {\n  if (indexPath.row === 1 && indexPath.section === 0) {\n    return SidebarItem.JAVASCRIPT_FAVORITE;\n  } else if (\n    indexPath.row === 0 &&\n    (indexPath.section === 0 || indexPath.section === undefined)\n  ) {\n    return SidebarItem.JAVASCRIPT;\n  } else if (\n    indexPath.row === 1 &&\n    (indexPath.section === 0 || indexPath.section === undefined)\n  ) {\n    return SidebarItem.REACT;\n  }\n};\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n","import {\n  Menu,\n  MenuGroup,\n  MenuItem,\n  Icon,\n  Text,\n  useTheme,\n} from \"@ui-kitten/components\";\nimport { observer } from \"mobx-react-lite\";\nimport { View } from \"react-native\";\nimport { getCategory } from \"../data-contracts\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const Sidebar = observer(\n  ({ store: { menuStore, questionStore } }: Props) => {\n    const { javasctiptFavorites } = questionStore;\n    const theme = useTheme();\n\n    const StarIcon = (props) => (\n      <Icon {...props} style={{ width: 16, height: 16 }} name=\"star-outline\" />\n    );\n\n    const FavCount = () => (\n      <View\n        style={{\n          backgroundColor: theme[\"border-basic-color-4\"],\n          width: 20,\n          height: 20,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 20,\n        }}\n      >\n        <Text category=\"label\" appearance=\"hint\" status=\"primary\">\n          {javasctiptFavorites.length}\n        </Text>\n      </View>\n    );\n\n    const BookOpen = (props) => (\n      <Icon\n        {...props}\n        style={{ width: 16, height: 16 }}\n        name=\"book-open-outline\"\n      />\n    );\n\n    return (\n      <Menu\n        selectedIndex={menuStore.selectedMenu}\n        onSelect={(index) => {\n          console.log(index);\n          menuStore.setSelectedMenu(index);\n          questionStore.clearFilter(getCategory(index));\n        }}\n      >\n        {javasctiptFavorites?.length ? (\n          <MenuGroup title=\"Javascript\">\n            <MenuItem title=\"All\" accessoryLeft={BookOpen} />\n            <MenuItem\n              title=\"Favorites\"\n              accessoryLeft={StarIcon}\n              accessoryRight={FavCount}\n            />\n          </MenuGroup>\n        ) : (\n          <MenuItem title=\"Javascript\" />\n        )}\n\n        <MenuItem title=\"React\" />\n        <MenuItem title=\"HTML\"></MenuItem>\n        <MenuItem title=\"CSS\"></MenuItem>\n        <MenuItem title=\"Accessibility\"></MenuItem>\n      </Menu>\n    );\n  }\n);\n","import { Spinner } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\n\nexport default function Loader() {\n  const { height: screenHeight } = useWindowDimensions();\n  return (\n    <View\n      style={[\n        styles.loaderContainer,\n        {\n          height: `${screenHeight - 90}px`,\n        },\n      ]}\n    >\n      <Spinner size=\"giant\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingRight: 200,\n    paddingBottom: 100,\n  },\n});\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { getCategory, Question, SidebarItem } from \"../data-contracts\";\nimport { Button, Icon, IndexPath, ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  selectedItem: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n  toggleFavorite: (item: Question, category: SidebarItem) => void;\n  selectedMenu: IndexPath;\n}\n\nconst QuestionItemWeb = ({\n  item,\n  setSlected,\n  index,\n  toggleFavorite,\n  selectedItem,\n  selectedMenu,\n}: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  const StarIcon = (props) => (\n    <Icon {...props} name={item?.bookmarked ? \"star\" : \"star-outline\"} />\n  );\n\n  const favButton = () => {\n    return (\n      <Button\n        size=\"tiny\"\n        appearance=\"ghost\"\n        onPress={() => toggleFavorite(item, getCategory(selectedMenu))}\n        status={item?.bookmarked ? \"danger\" : \"basic\"}\n        accessoryLeft={StarIcon}\n      />\n    );\n  };\n\n  return (\n    <ListItem\n      title={`${index + 1}. ${item?.title}`}\n      onPress={onItemClick}\n      accessoryRight={favButton}\n      style={{\n        backgroundColor:\n          item?.id === selectedItem?.id ? \"rgba(51, 102, 255, 0.08)\" : null,\n      }}\n    />\n  );\n};\n\nexport default memo(QuestionItemWeb);\n","import { Divider, List } from \"@ui-kitten/components\";\nimport React, { memo } from \"react\";\nimport { Platform } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\n\nfunction QuestionList({\n  listData,\n  toggleFavorite,\n  setSelectedQuestion,\n  selectedQuestion,\n  selectedMenu,\n}) {\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item?.id}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n          selectedItem={selectedQuestion}\n          toggleFavorite={toggleFavorite}\n          selectedMenu={selectedMenu}\n        />\n      );\n    }\n    return <QuestionItem key={item?.title} item={item} />;\n  };\n\n  console.log(\"Render q list\");\n  return (\n    <List\n      data={listData}\n      ItemSeparatorComponent={Divider}\n      renderItem={renderQuestion}\n      style={{\n        borderLeftWidth: 1,\n        borderRightWidth: 1,\n        borderColor: \"rgba(0,0,0,0.1)\",\n      }}\n    />\n  );\n}\n\nexport default memo(QuestionList);\n","import React, { useEffect, useState } from \"react\";\nimport { View, StyleSheet, Platform, useWindowDimensions } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, Input, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\nimport { Question, SidebarItem } from \"../data-contracts\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\nimport QuestionList from \"./QuestionList\";\n\ninterface Props {\n  store: IStore;\n}\n\nlet searchTimer;\n\nexport const QuestionContainer = observer(({ store }: Props) => {\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const { height: screenHeight } = useWindowDimensions();\n\n  const [value, setValue] = useState(\"\");\n\n  const {\n    menuStore: { selectedMenu },\n    questionStore: {\n      isLoading,\n      getQuestions,\n      toggleFavorite,\n      searchQuestion,\n      filteredList,\n    },\n  } = store;\n\n  const isFavMenuSelected =\n    selectedMenu.row === 1 && selectedMenu.section === 0;\n\n  const listData = filteredList;\n  const searchCategory = isFavMenuSelected\n    ? SidebarItem.JAVASCRIPT_FAVORITE\n    : SidebarItem.JAVASCRIPT;\n\n  useEffect(() => {\n    (async () => {\n      getQuestions(SidebarItem.JAVASCRIPT);\n    })();\n  }, []);\n\n  const onSearch = (value: string) => {\n    setValue(value);\n\n    clearTimeout(searchTimer);\n    searchTimer = setTimeout(() => {\n      searchQuestion(value, searchCategory);\n    }, 300);\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      return (\n        <>\n          {isLoading && <Loader />}\n          <View style={styles.panel}>\n            <View\n              style={[\n                styles.panelLeft,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <Input\n                placeholder=\"Search\"\n                size=\"small\"\n                value={value}\n                onChangeText={onSearch}\n              />\n\n              <QuestionList\n                listData={listData}\n                toggleFavorite={toggleFavorite}\n                selectedQuestion={selectedQuestion}\n                setSelectedQuestion={setSelectedQuestion}\n                selectedMenu={selectedMenu}\n              />\n            </View>\n            <View\n              style={[\n                styles.panelRight,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <QuestionDetail selected={selectedQuestion} />\n            </View>\n          </View>\n        </>\n      );\n    }\n    return (\n      <>\n        {isLoading && <Loader />}\n        <Input\n          placeholder=\"Search\"\n          value={value}\n          onChangeText={(nextValue) => setValue(nextValue)}\n        />\n        <QuestionList\n          listData={listData}\n          toggleFavorite={toggleFavorite}\n          selectedQuestion={selectedQuestion}\n          setSelectedQuestion={setSelectedQuestion}\n          selectedMenu={selectedMenu}\n        />\n      </>\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  panel: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  panelLeft: {\n    width: `40%`,\n    overflow: \"scroll\",\n  },\n  panelRight: {\n    width: `60%`,\n    overflow: \"scroll\",\n    padding: 16,\n    paddingRight: 32,\n  },\n});\n","import React, { useState } from \"react\";\nimport {\n  Icon,\n  Input,\n  TopNavigation,\n  TopNavigationAction,\n} from \"@ui-kitten/components\";\nimport { AppTheme } from \"../data-contracts\";\nimport { useWindowDimensions, View } from \"react-native\";\n\ninterface Props {\n  theme: AppTheme;\n  setTheme: (theme: AppTheme) => void;\n}\n\nfunction Header({ theme, setTheme }: Props) {\n  const [value, setValue] = useState(\"\");\n  const { width } = useWindowDimensions();\n\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const SearchBar = () => (\n    <View\n      style={{\n        width: width - 440,\n        maxWidth: 600,\n        marginRight: width / 8,\n      }}\n    >\n      <Input\n        placeholder=\"Search\"\n        value={value}\n        onChangeText={(nextValue) => setValue(nextValue)}\n      />\n    </View>\n  );\n\n  const renderRightNav = () => {\n    return (\n      <View\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          // width: \"80%\",\n        }}\n      >\n        {/* <SearchBar /> */}\n        <TopNavigationAction\n          onPress={() => {\n            setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n          }}\n          icon={ToggleIcon}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <TopNavigation\n      style={{\n        paddingLeft: 16,\n        paddingRight: 16,\n      }}\n      title={\"Interview Questions\"}\n      // accessoryLeft={SearchBar}\n      accessoryRight={renderRightNav}\n    ></TopNavigation>\n  );\n}\n\nexport default Header;\n","import { IndexPath } from \"@ui-kitten/components\";\nimport { makeAutoObservable } from \"mobx\";\n\nexport interface IMenuStore {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport class MenuStore implements IMenuStore {\n  selectedMenu: IndexPath = new IndexPath(0);\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setSelectedMenu(selectedMenu) {\n    this.selectedMenu = selectedMenu;\n  }\n}\n","const JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v1.json\";\n\nexport const getJSQuestions = async () => {\n  try {\n    const res = await fetch(JS_URL);\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { makeAutoObservable } from \"mobx\";\nimport { getJSQuestions } from \"../apis\";\nimport { Question, SidebarItem } from \"../data-contracts\";\n\nexport interface IQuestionStore {\n  isLoading: boolean;\n  setIsLoading: (value: boolean) => void;\n  javasctipt: Question[];\n  setJavascript: (questions: Question[]) => void;\n  javasctiptFavorites: Question[];\n  setJavascriptFavorites: (questions: Question[]) => void;\n  filteredList: Question[];\n  setFilteredList: (questions: Question[]) => void;\n  getQuestions: (type: SidebarItem) => void;\n  toggleFavorite: (item: Question, category?: SidebarItem) => void;\n  searchQuestion: (text: string, category?: string) => void;\n  clearFilter: (selectedCategory) => void;\n}\n\nexport class QuestionStore implements IQuestionStore {\n  isLoading: boolean = false;\n  javasctipt: Question[] = [];\n  filteredList: Question[] = [];\n  javasctiptFavorites: Question[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // Get favorites from localstore\n    const jsFavString = localStorage.getItem(SidebarItem.JAVASCRIPT_FAVORITE);\n    if (jsFavString) {\n      const jsFavObject = JSON.parse(jsFavString);\n      this.setJavascriptFavorites(jsFavObject);\n    }\n  }\n\n  includeFavorites = (data: Question[]) => {\n    this.javasctiptFavorites.forEach((fav) => {\n      const founded = data.findIndex((item) => item.id === fav.id);\n      data.splice(founded, 1);\n    });\n\n    return [...this.javasctiptFavorites, ...data];\n  };\n\n  getQuestions = async (type: SidebarItem) => {\n    switch (type) {\n      case SidebarItem.JAVASCRIPT:\n        try {\n          console.log(\"made fresh api call\");\n          this.setIsLoading(true);\n          const data = await getJSQuestions();\n          const currentList = this.includeFavorites(data);\n\n          this.setJavascript(currentList);\n          this.setFilteredList(currentList);\n        } catch (error) {\n          console.log(error);\n        } finally {\n          this.setIsLoading(false);\n        }\n    }\n  };\n\n  setJavascript = (data: Question[]) => {\n    this.javasctipt = data;\n  };\n\n  setFilteredList = (data: Question[]) => {\n    this.filteredList = data;\n  };\n\n  setIsLoading = (isLoading: boolean) => {\n    this.isLoading = isLoading;\n  };\n\n  setJavascriptFavorites = (data: Question[]) => {\n    localStorage.setItem(SidebarItem.JAVASCRIPT_FAVORITE, JSON.stringify(data));\n    this.javasctiptFavorites = data;\n  };\n\n  searchQuestion = (text: string, category: SidebarItem) => {\n    let filtered = [];\n\n    switch (category) {\n      case SidebarItem.JAVASCRIPT_FAVORITE:\n        filtered = this.javasctiptFavorites.filter((q) => {\n          return q.title.toLocaleLowerCase().includes(text.toLocaleLowerCase());\n        });\n        break;\n      default:\n        filtered = this.javasctipt.filter((q) => {\n          return q.title.toLocaleLowerCase().includes(text.toLowerCase());\n        });\n    }\n\n    this.setFilteredList(filtered);\n  };\n\n  clearFilter = (selectedCategory: any) => {\n    switch (selectedCategory) {\n      case SidebarItem.JAVASCRIPT:\n        this.setFilteredList(this.javasctipt);\n        break;\n      case SidebarItem.JAVASCRIPT_FAVORITE:\n        this.setFilteredList(this.javasctiptFavorites);\n        break;\n      default:\n        this.setFilteredList(this.javasctipt);\n    }\n  };\n\n  toggleFavorite = (item: Question, category?: SidebarItem) => {\n    // If item is present in fav list remove it\n\n    const foundedIndex = this.javasctiptFavorites.findIndex(\n      (fav) => fav.id === item.id\n    );\n\n    let foundedEle = this.javasctiptFavorites[foundedIndex];\n\n    if (foundedIndex >= 0) {\n      // Remove from fav\n\n      const newJsData = this.javasctipt.map((ele) => {\n        if (ele.id === foundedEle.id) {\n          return {\n            ...ele,\n            bookmarked: false,\n          };\n        }\n        return ele;\n      });\n      this.setJavascript(newJsData);\n\n      const newJsFavData = this.javasctiptFavorites.filter(\n        (item) => item.id !== foundedEle.id\n      );\n      this.setJavascriptFavorites(newJsFavData);\n\n      // Set new list based on category\n      if (category === SidebarItem.JAVASCRIPT) {\n        this.setFilteredList(newJsData);\n      }\n      if (category === SidebarItem.JAVASCRIPT_FAVORITE) {\n        this.setFilteredList(newJsFavData);\n      }\n    } else {\n      // Add to fav\n\n      const newJsData = this.javasctipt.map((question) => {\n        if (question.id === item.id) {\n          return {\n            ...item,\n            bookmarked: true,\n          };\n        }\n        return question;\n      });\n      this.setJavascript(newJsData);\n\n      const newJsFavData = [\n        { ...item, bookmarked: true },\n        ...this.javasctiptFavorites,\n      ];\n      this.setJavascriptFavorites(newJsFavData);\n\n      // Set new list based on category\n      if (category === SidebarItem.JAVASCRIPT) {\n        this.setFilteredList(newJsData);\n      }\n      if (category === SidebarItem.JAVASCRIPT_FAVORITE) {\n        this.setFilteredList(newJsFavData);\n      }\n    }\n  };\n}\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  Layout,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./src/components/Sidebar\";\nimport { QuestionContainer } from \"./src/components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { AppTheme } from \"./src/data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport Header from \"./src/components/Header\";\nimport { useEffect } from \"react\";\nimport { Store } from \"./src/stores\";\n\nconst store = new Store();\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const userTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState<AppTheme>(\n    (userTheme as AppTheme) ?? AppTheme.LIGHT\n  );\n\n  console.log(store);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <Header theme={theme} setTheme={setTheme} />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar store={store} />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer store={store} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n","import { IMenuStore, MenuStore } from \"./menuStore\";\nimport { IQuestionStore, QuestionStore } from \"./questionsStore\";\n\nexport interface IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n}\n\nexport class Store implements IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n\n  constructor() {\n    this.menuStore = new MenuStore();\n    this.questionStore = new QuestionStore();\n  }\n}\n"],"sourceRoot":""}