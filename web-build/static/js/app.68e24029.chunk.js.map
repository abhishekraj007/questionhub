{"version":3,"sources":["src/components/Sidebar.tsx","src/components/Loader.tsx","src/data-contracts/index.tsx","src/components/QuestionDetail.tsx","src/components/QuestionItem.tsx","src/components/QuestionItemWeb.tsx","src/components/QuestionList.tsx","src/components/QuestionContainer.tsx","src/components/Header.tsx","src/stores/menuStore.ts","src/apis/index.ts","src/stores/questionsStore.ts","App.tsx","src/stores/index.ts"],"names":["Sidebar","observer","store","menuStore","javasctiptFavorites","questionStore","theme","useTheme","selectedIndex","selectedMenu","onSelect","index","setSelectedMenu","length","title","accessoryLeft","props","style","width","height","name","accessoryRight","View","backgroundColor","display","alignItems","justifyContent","borderRadius","category","appearance","status","Loader","screenHeight","useWindowDimensions","styles","loaderContainer","size","SidebarItem","AppTheme","StyleSheet","create","paddingRight","paddingBottom","memo","selected","screenWidth","contentWidth","source","html","content","tagsStyles","body","color","position","left","top","transform","translateX","translateY","accordionItem","borderWidth","borderColor","marginBottom","item","useState","setSlected","onFavPress","selectedItem","toggleFav","bookmarked","StarIcon","onPress","id","listData","setSelectedQuestion","selectedQuestion","console","log","data","ItemSeparatorComponent","Divider","renderItem","Platform","OS","borderLeftWidth","borderRightWidth","QuestionContainer","value","setValue","isLoading","javasctipt","getQuestions","toggleFavorite","row","section","useEffect","a","async","JAVASCRIPT","onSearch","panel","panelLeft","placeholder","onChangeText","panelRight","nextValue","flexDirection","overflow","padding","Header","setTheme","ToggleIcon","LIGHT","paddingLeft","DARK","icon","MenuStore","IndexPath","makeAutoObservable","this","getJSQuestions","fetch","res","json","QuestionStore","includeFavorites","forEach","fav","founded","findIndex","splice","type","setIsLoading","setJavascript","setJavascriptFavorites","localStorage","setItem","JAVASCRIPT_FAVORITE","JSON","stringify","foundedIndex","foundedEle","newFav","filter","newRawData","map","ele","nonFavData","question","jsFavString","getItem","jsFavObject","parse","userTheme","icons","EvaIconsPack","eva","container"],"mappings":"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","file":"static/js/app.68e24029.chunk.js","sourcesContent":["import {\n  Menu,\n  MenuGroup,\n  MenuItem,\n  Icon,\n  Text,\n  useTheme,\n} from \"@ui-kitten/components\";\nimport { observer } from \"mobx-react-lite\";\nimport { View } from \"react-native\";\nimport { IStore } from \"../stores\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const Sidebar = observer(\n  ({ store: { menuStore, questionStore } }: Props) => {\n    const { javasctiptFavorites } = questionStore;\n    const theme = useTheme();\n\n    const StarIcon = (props) => (\n      <Icon {...props} style={{ width: 16, height: 16 }} name=\"star-outline\" />\n    );\n\n    const FavCount = () => (\n      <View\n        style={{\n          backgroundColor: theme[\"border-basic-color-4\"],\n          width: 20,\n          height: 20,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderRadius: 20,\n        }}\n      >\n        <Text category=\"label\" appearance=\"hint\" status=\"warning\">\n          {javasctiptFavorites.length}\n        </Text>\n      </View>\n    );\n\n    const BookOpen = (props) => (\n      <Icon\n        {...props}\n        style={{ width: 16, height: 16 }}\n        name=\"book-open-outline\"\n      />\n    );\n\n    return (\n      <Menu\n        selectedIndex={menuStore.selectedMenu}\n        onSelect={(index) => {\n          menuStore.setSelectedMenu(index);\n        }}\n      >\n        {javasctiptFavorites?.length ? (\n          <MenuGroup title=\"Javascript\">\n            <MenuItem title=\"All\" accessoryLeft={BookOpen} />\n            <MenuItem\n              title=\"Favorites\"\n              accessoryLeft={StarIcon}\n              accessoryRight={FavCount}\n            />\n          </MenuGroup>\n        ) : (\n          <MenuItem title=\"Javascript\" />\n        )}\n\n        <MenuItem title=\"React\" />\n        <MenuItem title=\"HTML\"></MenuItem>\n        <MenuItem title=\"CSS\"></MenuItem>\n        <MenuItem title=\"Accessibility\"></MenuItem>\n      </Menu>\n    );\n  }\n);\n","import { Spinner } from \"@ui-kitten/components\";\nimport React from \"react\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\n\nexport default function Loader() {\n  const { height: screenHeight } = useWindowDimensions();\n  return (\n    <View\n      style={[\n        styles.loaderContainer,\n        {\n          height: `${screenHeight - 90}px`,\n        },\n      ]}\n    >\n      <Spinner size=\"giant\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loaderContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingRight: 200,\n    paddingBottom: 100,\n  },\n});\n","export interface Question {\n  id?: string;\n  title: string;\n  content: string[];\n  bookmarked?: boolean;\n  category?: string;\n}\n\nexport enum SidebarItem {\n  JAVASCRIPT = \"JAVASCRIPT\",\n  JAVASCRIPT_FAVORITE = \"JAVASCRIPT_FAVORITE\",\n  REACT = \"REACT\",\n  REACT_FAVORITE = \"REACT_FAVORITE\",\n}\n\nexport enum AppTheme {\n  LIGHT = \"LIGHT\",\n  DARK = \"DARK\",\n}\n","import React, { memo } from \"react\";\nimport { useWindowDimensions, StyleSheet, View } from \"react-native\";\nimport RenderHTML from \"react-native-render-html\";\nimport { Layout, styled, useTheme, Text } from \"@ui-kitten/components\";\nimport { Question } from \"../data-contracts\";\n\ninterface QuestionDetailProps {\n  selected: Question | undefined;\n}\n\nconst QuestionDetail = ({ selected }: QuestionDetailProps) => {\n  const theme = useTheme();\n  const { width: screenWidth, height: screenHeight } = useWindowDimensions();\n\n  if (selected) {\n    return (\n      <RenderHTML\n        contentWidth={screenWidth / 2}\n        source={{\n          html: `${selected?.content}`,\n        }}\n        tagsStyles={{\n          body: {\n            color: theme[\"text-basic-color\"],\n          },\n        }}\n      />\n    );\n  }\n\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        left: \"50%\",\n        top: \"50%\",\n        transform: [\n          {\n            translateX: -60,\n            translateY: -20,\n          },\n        ],\n      }}\n    >\n      <Text>Select a Question</Text>\n    </View>\n  );\n};\n\nexport default memo(QuestionDetail);\n","import React, { memo } from \"react\";\nimport { useState } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { StyleSheet, useWindowDimensions } from \"react-native\";\nimport { Text } from \"@ui-kitten/components\";\nimport RenderHTML from \"react-native-render-html\";\n\ninterface QuestionItemProps {\n  item: Question;\n}\n\nconst QuestionItem = ({ item }: QuestionItemProps) => {\n  const [expanded, setExpanded] = useState(false);\n  const { title, content } = item;\n  const wrappedContent = `<div>${content}</div>`;\n  const { width } = useWindowDimensions();\n\n  return <Text>{item.title}</Text>;\n};\n\nconst styles = StyleSheet.create({\n  accordionItem: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.1)\",\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n});\n\nexport default memo(QuestionItem);\n","import React, { memo } from \"react\";\nimport { Question } from \"../data-contracts\";\nimport { Button, Icon, ListItem } from \"@ui-kitten/components\";\n\ninterface QuestionItemWebProps {\n  item: Question;\n  selectedItem: Question;\n  index: number;\n  setSlected: (item: Question) => void;\n  onFavPress: (item: Question) => void;\n}\n\nconst QuestionItemWeb = ({\n  item,\n  setSlected,\n  index,\n  onFavPress,\n  selectedItem,\n}: QuestionItemWebProps) => {\n  const onItemClick = () => {\n    setSlected(item);\n  };\n\n  const toggleFav = () => {\n    onFavPress({\n      ...item,\n      bookmarked: !item.bookmarked,\n    });\n  };\n\n  const StarIcon = (props) => (\n    <Icon {...props} name={item?.bookmarked ? \"star\" : \"star-outline\"} />\n  );\n\n  const favButton = () => {\n    return (\n      <Button\n        size=\"tiny\"\n        appearance=\"ghost\"\n        onPress={toggleFav}\n        status={item?.bookmarked ? \"danger\" : \"basic\"}\n        accessoryLeft={StarIcon}\n      />\n    );\n  };\n\n  return (\n    <ListItem\n      title={`${index + 1}. ${item?.title}`}\n      onPress={onItemClick}\n      accessoryRight={favButton}\n      style={{\n        backgroundColor:\n          item?.id === selectedItem?.id ? \"rgba(51, 102, 255, 0.08)\" : null,\n      }}\n    />\n  );\n};\n\nexport default memo(QuestionItemWeb);\n","import { Divider, List } from \"@ui-kitten/components\";\nimport React, { memo } from \"react\";\nimport { Platform } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\n\nfunction QuestionList({\n  listData,\n  toggleFav,\n  setSelectedQuestion,\n  selectedQuestion,\n}) {\n  const renderQuestion = ({ item, index }) => {\n    if (Platform.OS === \"web\") {\n      return (\n        <QuestionItemWeb\n          key={item.title}\n          item={item}\n          index={index}\n          setSlected={setSelectedQuestion}\n          selectedItem={selectedQuestion}\n          onFavPress={toggleFav}\n        />\n      );\n    }\n    return <QuestionItem key={item.title} item={item} />;\n  };\n\n  console.log(\"Render q list\");\n  return (\n    <List\n      data={listData}\n      ItemSeparatorComponent={Divider}\n      renderItem={renderQuestion}\n      style={{\n        borderLeftWidth: 1,\n        borderRightWidth: 1,\n        borderColor: \"rgba(0,0,0,0.1)\",\n      }}\n    />\n  );\n}\n\nexport default memo(QuestionList);\n","import React, { useEffect, useState } from \"react\";\nimport { View, StyleSheet, Platform, useWindowDimensions } from \"react-native\";\nimport QuestionItem from \"./QuestionItem\";\nimport QuestionItemWeb from \"./QuestionItemWeb\";\nimport Loader from \"./Loader\";\nimport { Divider, Input, List } from \"@ui-kitten/components\";\nimport QuestionDetail from \"./QuestionDetail\";\nimport { Question, SidebarItem } from \"../data-contracts\";\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores\";\nimport QuestionList from \"./QuestionList\";\n\ninterface Props {\n  store: IStore;\n}\n\nexport const QuestionContainer = observer(({ store }: Props) => {\n  const [selectedQuestion, setSelectedQuestion] = useState<Question>();\n  const { height: screenHeight } = useWindowDimensions();\n\n  const [value, setValue] = useState(\"\");\n\n  console.log(\"render q container\");\n\n  const {\n    menuStore: { selectedMenu },\n    questionStore: {\n      isLoading,\n      javasctipt,\n      javasctiptFavorites,\n      getQuestions,\n      toggleFavorite,\n    },\n  } = store;\n\n  const isFavMenuSelected =\n    selectedMenu.row === 1 && selectedMenu.section === 0;\n\n  const listData = isFavMenuSelected ? javasctiptFavorites : javasctipt;\n\n  const onFavPress = (item: Question) => {\n    toggleFavorite(item);\n  };\n\n  useEffect(() => {\n    (async () => {\n      getQuestions(SidebarItem.JAVASCRIPT);\n    })();\n  }, []);\n\n  const onSearch = (value) => {\n    setValue(value);\n  };\n\n  const renderList = () => {\n    if (Platform.OS === \"web\") {\n      console.log(\"web\");\n      return (\n        <>\n          {isLoading && <Loader />}\n          <View style={styles.panel}>\n            <View\n              style={[\n                styles.panelLeft,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <Input\n                placeholder=\"Search\"\n                size=\"small\"\n                value={value}\n                onChangeText={onSearch}\n              />\n\n              <QuestionList\n                listData={listData}\n                toggleFav={toggleFavorite}\n                selectedQuestion={selectedQuestion}\n                setSelectedQuestion={setSelectedQuestion}\n              />\n            </View>\n            <View\n              style={[\n                styles.panelRight,\n                {\n                  height: `${screenHeight - 90}px`,\n                },\n              ]}\n            >\n              <QuestionDetail selected={selectedQuestion} />\n            </View>\n          </View>\n        </>\n      );\n    }\n    return (\n      <>\n        {isLoading && <Loader />}\n        <Input\n          placeholder=\"Search\"\n          value={value}\n          onChangeText={(nextValue) => setValue(nextValue)}\n        />\n        <QuestionList\n          listData={listData}\n          toggleFav={toggleFavorite}\n          selectedQuestion={selectedQuestion}\n          setSelectedQuestion={setSelectedQuestion}\n        />\n      </>\n    );\n  };\n\n  return renderList();\n});\n\nconst styles = StyleSheet.create({\n  panel: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  panelLeft: {\n    width: `40%`,\n    overflow: \"scroll\",\n  },\n  panelRight: {\n    width: `60%`,\n    overflow: \"scroll\",\n    padding: 16,\n    paddingRight: 32,\n  },\n});\n","import React, { useState } from \"react\";\nimport {\n  Icon,\n  Input,\n  TopNavigation,\n  TopNavigationAction,\n} from \"@ui-kitten/components\";\nimport { AppTheme } from \"../data-contracts\";\nimport { useWindowDimensions, View } from \"react-native\";\n\ninterface Props {\n  theme: AppTheme;\n  setTheme: (theme: AppTheme) => void;\n}\n\nfunction Header({ theme, setTheme }: Props) {\n  const [value, setValue] = useState(\"\");\n  const { width } = useWindowDimensions();\n\n  const ToggleIcon = (props) => (\n    <Icon {...props} name={theme === AppTheme.LIGHT ? \"moon\" : \"sun\"} />\n  );\n\n  const SearchBar = () => (\n    <View\n      style={{\n        width: width - 440,\n        maxWidth: 600,\n        marginRight: width / 8,\n      }}\n    >\n      <Input\n        placeholder=\"Search\"\n        value={value}\n        onChangeText={(nextValue) => setValue(nextValue)}\n      />\n    </View>\n  );\n\n  const renderRightNav = () => {\n    return (\n      <View\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          // width: \"80%\",\n        }}\n      >\n        {/* <SearchBar /> */}\n        <TopNavigationAction\n          onPress={() => {\n            setTheme(theme === AppTheme.LIGHT ? AppTheme.DARK : AppTheme.LIGHT);\n          }}\n          icon={ToggleIcon}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <TopNavigation\n      style={{\n        paddingLeft: 16,\n        paddingRight: 16,\n      }}\n      title={\"Interview Questions\"}\n      // accessoryLeft={SearchBar}\n      accessoryRight={renderRightNav}\n    ></TopNavigation>\n  );\n}\n\nexport default Header;\n","import { IndexPath } from \"@ui-kitten/components\";\nimport { makeAutoObservable } from \"mobx\";\n\nexport interface IMenuStore {\n  selectedMenu: IndexPath;\n  setSelectedMenu: (selectedMenu: IndexPath) => void;\n}\n\nexport class MenuStore implements IMenuStore {\n  selectedMenu: IndexPath = new IndexPath(0);\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setSelectedMenu(selectedMenu) {\n    this.selectedMenu = selectedMenu;\n  }\n}\n","const JS_URL =\n  \"https://raw.githubusercontent.com/abhishekraj007/md2json/main/js-v1.json\";\n\nexport const getJSQuestions = async () => {\n  try {\n    const res = await fetch(JS_URL);\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { makeAutoObservable } from \"mobx\";\nimport { getJSQuestions } from \"../apis\";\nimport { Question, SidebarItem } from \"../data-contracts\";\n\nexport interface IQuestionStore {\n  isLoading: boolean;\n  setIsLoading: (value: boolean) => void;\n  javasctipt: Question[];\n  javasctiptFavorites: Question[];\n  setJavascript: (questions: Question[]) => void;\n  setJavascriptFavorites: (questions: Question[]) => void;\n  getQuestions: (type: SidebarItem) => void;\n  toggleFavorite: (item: Question) => void;\n}\n\nexport class QuestionStore implements IQuestionStore {\n  isLoading: boolean = false;\n  javasctipt: Question[] = [];\n  javasctiptFavorites: Question[] = [];\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // Get favorites from localstore\n    const jsFavString = localStorage.getItem(SidebarItem.JAVASCRIPT_FAVORITE);\n    if (jsFavString) {\n      const jsFavObject = JSON.parse(jsFavString);\n      this.setJavascriptFavorites(jsFavObject);\n    }\n  }\n\n  includeFavorites = (data: Question[]) => {\n    this.javasctiptFavorites.forEach((fav) => {\n      const founded = data.findIndex((item) => item.id === fav.id);\n      data.splice(founded, 1);\n    });\n\n    return [...this.javasctiptFavorites, ...data];\n  };\n\n  getQuestions = async (type: SidebarItem) => {\n    switch (type) {\n      case SidebarItem.JAVASCRIPT:\n        try {\n          console.log(\"made fresh api call\");\n          this.setIsLoading(true);\n          const data = await getJSQuestions();\n\n          this.setJavascript(this.includeFavorites(data));\n        } catch (error) {\n          console.log(error);\n        } finally {\n          this.setIsLoading(false);\n        }\n    }\n  };\n\n  setJavascript = (data: Question[]) => {\n    this.javasctipt = data;\n  };\n\n  setIsLoading = (isLoading: boolean) => {\n    this.isLoading = isLoading;\n  };\n\n  setJavascriptFavorites = (data: Question[]) => {\n    localStorage.setItem(SidebarItem.JAVASCRIPT_FAVORITE, JSON.stringify(data));\n    this.javasctiptFavorites = data;\n  };\n\n  toggleFavorite = (item: Question) => {\n    // If item is present in fav list remove it\n\n    const foundedIndex = this.javasctiptFavorites.findIndex(\n      (fav) => fav.id === item.id\n    );\n\n    console.log(foundedIndex);\n    let foundedEle = this.javasctiptFavorites[foundedIndex];\n\n    // Present in fav\n    if (foundedIndex >= 0) {\n      console.log(\"found an ele\");\n      // remove from fav\n      const newFav = this.javasctiptFavorites.filter(\n        (item) => item.id !== foundedEle.id\n      );\n      console.log(newFav);\n      this.setJavascriptFavorites(newFav);\n      // toggle state in original array as well\n      // foundedEle = {\n      //   ...foundedEle,\n      //   bookmarked: false,\n      // };\n      const newRawData = this.javasctipt.map((ele) => {\n        if (ele.id === foundedEle.id) {\n          return {\n            ...ele,\n            bookmarked: false,\n          };\n        }\n        return ele;\n      });\n\n      this.setJavascript(newRawData);\n    } else {\n      const nonFavData = this.javasctipt.filter(\n        (question) => question.id !== item.id\n      );\n\n      this.setJavascript([item, ...nonFavData]);\n\n      this.setJavascriptFavorites([...this.javasctiptFavorites, item]);\n    }\n  };\n}\n","import React from \"react\";\nimport * as eva from \"@eva-design/eva\";\nimport {\n  ApplicationProvider,\n  Divider,\n  Layout,\n  IconRegistry,\n} from \"@ui-kitten/components\";\nimport { StyleSheet, useWindowDimensions, View } from \"react-native\";\nimport { Sidebar } from \"./src/components/Sidebar\";\nimport { QuestionContainer } from \"./src/components/QuestionContainer\";\nimport { useState } from \"react\";\nimport { AppTheme } from \"./src/data-contracts\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport Header from \"./src/components/Header\";\nimport { useEffect } from \"react\";\nimport { Store } from \"./src/stores\";\n\nconst store = new Store();\n\nexport default () => {\n  const { width: screenWidth } = useWindowDimensions();\n  const userTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState<AppTheme>(\n    (userTheme as AppTheme) ?? AppTheme.LIGHT\n  );\n\n  console.log(store);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider\n        {...eva}\n        theme={theme === AppTheme.LIGHT ? eva.light : eva.dark}\n      >\n        <Header theme={theme} setTheme={setTheme} />\n        <Divider />\n        <Layout style={styles.container}>\n          <View\n            style={{\n              width: \"280px\",\n            }}\n          >\n            <Sidebar store={store} />\n          </View>\n          <View\n            style={{\n              width: `${screenWidth - 280}px`,\n            }}\n          >\n            <QuestionContainer store={store} />\n          </View>\n        </Layout>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n","import { IMenuStore, MenuStore } from \"./menuStore\";\nimport { IQuestionStore, QuestionStore } from \"./questionsStore\";\n\nexport interface IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n}\n\nexport class Store implements IStore {\n  menuStore: IMenuStore;\n  questionStore: IQuestionStore;\n\n  constructor() {\n    this.menuStore = new MenuStore();\n    this.questionStore = new QuestionStore();\n  }\n}\n"],"sourceRoot":""}